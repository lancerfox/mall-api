import { Test, TestingModule } from '@nestjs/testing';
import { getModelToken } from '@nestjs/mongoose';
import { HttpException } from '@nestjs/common';
import { Model, Types } from 'mongoose';
import { MenuService } from '../services/menu.service';
import { Menu, MenuDocument } from '../entities/menu.entity';
import { PermissionService } from '../../permission/services/permission.service';
import { RoleService } from '../../role/services/role.service';
import { ERROR_CODES } from '../../../common/constants/error-codes';
import { PermissionType } from '../../../common/decorators/roles.decorator';
import { RoleType } from '../../../common/enums/role-type.enum';

describe('MenuService', () => {
  let service: MenuService;
  let menuModel: jest.Mocked<Model<MenuDocument>>;
  let permissionService: jest.Mocked<PermissionService>;
  let roleService: jest.Mocked<RoleService>;

  // 测试数据
  const mockMenu = {
    _id: new Types.ObjectId(),
    parentId: null,
    path: '/system/user',
    name: '用户管理',
    component: 'UserManagement',
    metaTitle: '用户管理',
    metaIcon: 'user',
    metaHidden: false,
    metaAlwaysShow: false,
    sortOrder: 1,
    status: 'active',
    autoGeneratedPermission: 'page:system:用户管理',
    createdAt: new Date(),
    updatedAt: new Date(),
    children: [],
    save: jest.fn(),
    toObject: jest.fn(),
  };

  const mockMenuList = [
    {
      _id: new Types.ObjectId(),
      parentId: null,
      path: '/system',
      name: '系统管理',
      component: 'Layout',
      metaTitle: '系统管理',
      metaIcon: 'system',
      sortOrder: 1,
      status: 'active',
      children: [],
    },
    {
      _id: new Types.ObjectId(),
      parentId: mockMenu._id,
      path: '/system/user',
      name: '用户管理',
      component: 'UserManagement',
      metaTitle: '用户管理',
      metaIcon: 'user',
      sortOrder: 2,
      status: 'active',
      children: [],
    },
  ];

  const mockRole = {
    _id: new Types.ObjectId(),
    id: new Types.ObjectId().toString(),
    name: '管理员',
    type: RoleType.ADMIN,
    permissions: [new Types.ObjectId()],
  };

  const mockPermissions = [
    {
      _id: new Types.ObjectId(),
      name: 'page:system:用户管理',
      description: '访问用户管理页面的权限',
      type: PermissionType.PAGE,
      module: 'system',
    },
  ];

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        MenuService,
        {
          provide: getModelToken(Menu.name),
          useValue: {
            findById: jest.fn(),
            find: jest.fn(),
            findByIdAndUpdate: jest.fn(),
            findByIdAndDelete: jest.fn(),
            create: jest.fn(),
            save: jest.fn(),
          },
        },
        {
          provide: PermissionService,
          useValue: {
            create: jest.fn(),
            findByName: jest.fn(),
            findByIds: jest.fn(),
            updateByName: jest.fn(),
            removeByName: jest.fn(),
          },
        },
        {
          provide: RoleService,
          useValue: {
            findById: jest.fn(),
          },
        },
      ],
    }).compile();

    service = module.get<MenuService>(MenuService);
    menuModel = module.get(getModelToken(Menu.name));
    permissionService = module.get(PermissionService);
    roleService = module.get(RoleService);

    // 模拟 menuModel 构造函数
    (menuModel as any).mockImplementation = jest.fn();

    // 重置所有 mock
    jest.clearAllMocks();
  });

  describe('findAll', () => {
    it('应该返回菜单树形结构', async () => {
      // 安排
      const mockQuery = {
        sort: jest.fn().mockReturnThis(),
        lean: jest.fn().mockReturnThis(),
        exec: jest.fn().mockResolvedValue(mockMenuList),
      };
      menuModel.find.mockReturnValue(mockQuery as any);

      // 执行
      const result = await service.findAll();

      // 断言
      expect(menuModel.find).toHaveBeenCalled();
      expect(result).toBeDefined();
      expect(Array.isArray(result)).toBe(true);
    });
  });

  describe('findOne', () => {
    it('应该成功返回指定ID的菜单', async () => {
      // 安排
      const menuId = mockMenu._id.toString();
      mockMenu.toObject.mockReturnValue(mockMenu);
      const mockQuery = {
        exec: jest.fn().mockResolvedValue(mockMenu),
      };
      menuModel.findById.mockReturnValue(mockQuery as any);

      // 执行
      const result = await service.findOne(menuId);

      // 断言
      expect(menuModel.findById).toHaveBeenCalledWith(menuId);
      expect(result).toEqual(mockMenu);
    });

    it('菜单不存在时应该抛出菜单不存在错误', async () => {
      // 安排
      const menuId = 'nonexistent-id';
      const mockQuery = {
        exec: jest.fn().mockResolvedValue(null),
      };
      menuModel.findById.mockReturnValue(mockQuery as any);

      // 执行和断言
      await expect(service.findOne(menuId)).rejects.toThrow(HttpException);
    });

    it('无效的菜单ID应该抛出菜单不存在错误', async () => {
      // 安排
      const invalidId = 'invalid-id';

      // 执行和断言
      await expect(service.findOne(invalidId)).rejects.toThrow(HttpException);
    });
  });

  describe('findByRole', () => {
    it('超级管理员应该返回所有活跃菜单', async () => {
      // 安排
      const roleId = 'super-admin-role-id';
      const superAdminRole = {
        ...mockRole,
        type: RoleType.SUPER_ADMIN,
      };

      roleService.findById.mockResolvedValue(superAdminRole as any);

      const mockQuery = {
        sort: jest.fn().mockReturnThis(),
        lean: jest.fn().mockReturnThis(),
        exec: jest.fn().mockResolvedValue(mockMenuList),
      };
      menuModel.find.mockReturnValue(mockQuery as any);

      // 执行
      const result = await service.findByRole(roleId);

      // 断言
      expect(roleService.findById).toHaveBeenCalledWith(roleId);
      expect(menuModel.find).toHaveBeenCalledWith({ status: 'active' });
      expect(result).toBeDefined();
      expect(Array.isArray(result)).toBe(true);
    });

    it('普通角色应该根据权限返回菜单', async () => {
      // 安排
      const roleId = 'normal-role-id';
      roleService.findById.mockResolvedValue(mockRole as any);
      permissionService.findByIds.mockResolvedValue(mockPermissions as any);

      const mockQuery = {
        sort: jest.fn().mockReturnThis(),
        lean: jest.fn().mockReturnThis(),
        exec: jest.fn().mockResolvedValue([mockMenuList[1]]),
      };
      menuModel.find.mockReturnValue(mockQuery as any);

      // 执行
      const result = await service.findByRole(roleId);

      // 断言
      expect(roleService.findById).toHaveBeenCalledWith(roleId);
      expect(permissionService.findByIds).toHaveBeenCalled();
      expect(result).toBeDefined();
      expect(Array.isArray(result)).toBe(true);
    });

    it('无权限的角色应该返回空数组', async () => {
      // 安排
      const roleId = 'no-permission-role-id';
      const noPermissionRole = {
        ...mockRole,
        permissions: [],
      };
      roleService.findById.mockResolvedValue(noPermissionRole as any);

      // 执行
      const result = await service.findByRole(roleId);

      // 断言
      expect(result).toEqual([]);
    });
  });

  describe('create', () => {
    it('应该成功创建菜单并自动生成权限', async () => {
      // 安排
      const createMenuDto = {
        path: '/test/menu',
        name: '测试菜单',
        component: 'TestMenu',
        metaTitle: '测试菜单',
        metaIcon: 'test',
      };

      const expectedMenu = {
        ...createMenuDto,
        _id: new Types.ObjectId(),
        autoGeneratedPermission: 'page:test:测试菜单',
        save: jest.fn(),
      };

      expectedMenu.save.mockResolvedValue(expectedMenu);
      permissionService.create.mockResolvedValue(mockPermissions[0] as any);

      // Mock服务的create方法
      jest.spyOn(service, 'create').mockResolvedValue(expectedMenu as any);

      // 执行
      const result = await service.create(createMenuDto);

      // 断言
      expect(result).toBeDefined();
      expect(result.autoGeneratedPermission).toContain('page:test');
    });
  });

  describe('update', () => {
    it('应该成功更新菜单信息', async () => {
      // 安排
      const updateMenuDto = {
        id: mockMenu._id.toString(),
        name: '更新后的菜单名',
        metaTitle: '更新后的标题',
      };

      menuModel.findById.mockResolvedValue({
        ...mockMenu,
        autoGeneratedPermission: 'page:system:用户管理',
      } as any);

      permissionService.findByName.mockResolvedValue({
        name: 'page:system:用户管理',
        module: 'system',
      } as any);

      permissionService.updateByName.mockResolvedValue(
        mockPermissions[0] as any,
      );

      const updatedMenu = { ...mockMenu, ...updateMenuDto };
      updatedMenu.toObject = jest.fn().mockReturnValue(updatedMenu);

      const mockQuery = {
        exec: jest.fn().mockResolvedValue(updatedMenu),
      };
      menuModel.findByIdAndUpdate.mockReturnValue(mockQuery as any);

      // 执行
      const result = await service.update(updateMenuDto);

      // 断言
      expect(menuModel.findById).toHaveBeenCalledWith(updateMenuDto.id);
      expect(menuModel.findByIdAndUpdate).toHaveBeenCalled();
      expect(result).toBeDefined();
    });

    it('更新不存在的菜单应该抛出菜单不存在错误', async () => {
      // 安排
      const updateMenuDto = {
        id: 'nonexistent-id',
        name: '更新菜单',
      };

      menuModel.findById.mockResolvedValue(null);

      // 执行和断言
      await expect(service.update(updateMenuDto)).rejects.toThrow(
        HttpException,
      );
    });
  });

  describe('delete', () => {
    it('应该成功删除菜单和关联权限', async () => {
      // 安排
      const menuId = mockMenu._id.toString();
      menuModel.findById.mockResolvedValue({
        ...mockMenu,
        autoGeneratedPermission: 'page:system:用户管理',
      } as any);

      permissionService.removeByName.mockResolvedValue(undefined);

      const mockQuery = {
        exec: jest.fn().mockResolvedValue(true),
      };
      menuModel.findByIdAndDelete.mockReturnValue(mockQuery as any);

      // 执行
      await service.delete(menuId);

      // 断言
      expect(menuModel.findById).toHaveBeenCalledWith(menuId);
      expect(permissionService.removeByName).toHaveBeenCalledWith(
        'page:system:用户管理',
      );
      expect(menuModel.findByIdAndDelete).toHaveBeenCalledWith(menuId);
    });

    it('删除不存在的菜单应该抛出菜单不存在错误', async () => {
      // 安排
      const menuId = 'nonexistent-id';
      menuModel.findById.mockResolvedValue(null);

      // 执行和断言
      await expect(service.delete(menuId)).rejects.toThrow(HttpException);
    });

    it('删除无关联权限的菜单应该只删除菜单', async () => {
      // 安排
      const menuId = mockMenu._id.toString();
      menuModel.findById.mockResolvedValue({
        ...mockMenu,
        autoGeneratedPermission: undefined,
      } as any);

      const mockQuery = {
        exec: jest.fn().mockResolvedValue(true),
      };
      menuModel.findByIdAndDelete.mockReturnValue(mockQuery as any);

      // 执行
      await service.delete(menuId);

      // 断言
      expect(menuModel.findById).toHaveBeenCalledWith(menuId);
      expect(permissionService.removeByName).not.toHaveBeenCalled();
      expect(menuModel.findByIdAndDelete).toHaveBeenCalledWith(menuId);
    });
  });
});
