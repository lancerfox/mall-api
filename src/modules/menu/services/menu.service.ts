import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { BusinessException } from 'src/common/exceptions/business.exception';
import { ERROR_CODES } from 'src/common/constants/error-codes';
import { Repository, FindOptionsWhere } from 'typeorm';
import { Menu } from '../entities/menu.entity';
import { CreateMenuDto } from '../dto/create-menu.dto';
import { UpdateMenuDto } from '../dto/update-menu.dto';
import { MenuTree } from '../types/menu.types';
import { MenuResponseDto } from '../dto/menu-response.dto';
import { PermissionService } from '../../permission/services/permission.service';
import { RoleService } from '../../role/services/role.service';
import { PermissionType } from '../../../common/decorators/roles.decorator';
import { RoleType } from '../../../common/enums/role-type.enum';

@Injectable()
export class MenuService {
  constructor(
    @InjectRepository(Menu) private menuRepository: Repository<Menu>,
    private permissionService: PermissionService,
    private roleService: RoleService,
  ) {}

  async findAll(): Promise<MenuResponseDto[]> {
    const menus = await this.menuRepository.find({
      order: { sortOrder: 'ASC', createdAt: 'ASC' },
    });

    const menuTree = this.buildMenuTree(menus);
    return menuTree.map((menu) => this.convertToResponseDto(menu));
  }

  async findOne(id: string): Promise<MenuResponseDto> {
    const menu = await this.menuRepository.findOne({ where: { id } });
    if (!menu) {
      throw new BusinessException(ERROR_CODES.MENU_NOT_FOUND);
    }
    return this.convertToResponseDto(menu as MenuTree);
  }

  async findByRole(roleId: string): Promise<MenuResponseDto[]> {
    // 获取角色信息
    const role = await this.roleService.findById(roleId);
    // 判断是否为超级管理员
    if (role.type === RoleType.SUPER_ADMIN) {
      // 超级管理员返回所有菜单
      const menus = await this.menuRepository.find({
        where: { status: 'active' },
        order: { sortOrder: 'ASC', createdAt: 'ASC' },
      });

      const menuTree = this.buildMenuTree(menus);
      return menuTree.map((menu) => this.convertToResponseDto(menu));
    }

    // 获取角色拥有的权限ID列表
    const permissionIds = (role.permissions || [])
      .map((permission) => {
        if (this.isPermissionObject(permission)) {
          return permission.id;
        }
        return '';
      })
      .filter((id): id is string => id !== '');

    if (permissionIds.length === 0) {
      return [];
    }

    // 获取权限对应的权限名称列表
    const permissions = await this.permissionService.findByIds(permissionIds);
    const permissionNames = permissions.map((p) => p.name);

    // 根据权限名称过滤菜单
    const whereConditions: FindOptionsWhere<Menu> = {
      status: 'active',
    };

    if (permissionNames.length > 0) {
      whereConditions.autoGeneratedPermission = permissionNames[0]; // 只取第一个权限名称
    }

    const menus = await this.menuRepository.find({
      where: whereConditions,
      order: { sortOrder: 'ASC', createdAt: 'ASC' },
    });

    const menuTree = this.buildMenuTree(menus);
    return menuTree.map((menu) => this.convertToResponseDto(menu));
  }

  async create(createMenuDto: CreateMenuDto): Promise<MenuResponseDto> {
    // 创建菜单
    const menu = this.menuRepository.create(createMenuDto);

    // 获取权限模块：如果有父级菜单，使用父级菜单的路径；否则使用当前菜单路径
    let permissionModule = this.getModuleFromPath(menu.path);
    if (menu.parentId) {
      const parentMenu = await this.menuRepository.findOne({
        where: { id: menu.parentId },
      });
      if (parentMenu) {
        permissionModule = this.getModuleFromPath(parentMenu.path);
      }
    }

    // 自动生成权限名称 (page:module:name-based)
    const permissionName = `page:${permissionModule}:${this.getPermissionName(menu.name)}`;
    menu.autoGeneratedPermission = permissionName;

    // 创建对应的权限
    await this.permissionService.create({
      name: permissionName,
      description: `访问 ${menu.name} 页面的权限`,
      type: PermissionType.PAGE,
      module: permissionModule,
      status: 'active',
    });

    const savedMenu = await this.menuRepository.save(menu);
    return this.convertToResponseDto(savedMenu as MenuTree);
  }

  async update(updateMenuDto: UpdateMenuDto): Promise<MenuResponseDto> {
    const { id, ...updateData } = updateMenuDto;

    const menu = await this.menuRepository.findOne({ where: { id } });
    if (!menu) {
      throw new BusinessException(ERROR_CODES.MENU_NOT_FOUND);
    }

    let permissionNameToSet: string | undefined;

    // 获取新的权限模块：如果有父级菜单，使用父级菜单的路径；否则使用当前菜单路径
    let newPermissionModule = this.getModuleFromPath(
      updateData.path || menu.path,
    );
    if (updateData.parentId || menu.parentId) {
      const parentId = updateData.parentId || menu.parentId;
      const parentMenu = await this.menuRepository.findOne({
        where: { id: parentId },
      });
      if (parentMenu) {
        newPermissionModule = this.getModuleFromPath(parentMenu.path);
      }
    }

    // 计算新的权限名称
    const newPermissionName = `page:${newPermissionModule}:${this.getPermissionName(updateData.name || menu.name)}`;

    // 如果菜单还没有自动生成的权限，创建新的权限
    if (!menu.autoGeneratedPermission) {
      permissionNameToSet = newPermissionName;
      await this.permissionService.create({
        name: permissionNameToSet,
        description: `访问 ${updateData.name || menu.name} 页面的权限`,
        type: PermissionType.PAGE,
        module: newPermissionModule,
        status: 'active',
      });
    }
    // 如果菜单已有权限，检查是否需要更新权限名称或模块
    else if (menu.autoGeneratedPermission) {
      // 检查权限名称或模块是否发生变化
      const currentPermission = await this.permissionService.findByName(
        menu.autoGeneratedPermission,
      );

      // 如果权限不存在，创建新的权限
      if (!currentPermission) {
        permissionNameToSet = newPermissionName;
        await this.permissionService.create({
          name: newPermissionName,
          description: `访问 ${updateData.name || menu.name} 页面的权限`,
          type: PermissionType.PAGE,
          module: newPermissionModule,
          status: 'active',
        });
      }
      // 如果权限存在且名称或模块发生变化，更新权限
      else if (
        currentPermission.name !== newPermissionName ||
        currentPermission.module !== newPermissionModule
      ) {
        // 权限名称或模块发生变化，需要更新权限
        await this.permissionService.updateByName(
          menu.autoGeneratedPermission,
          {
            name: newPermissionName,
            description: `访问 ${updateData.name || menu.name} 页面的权限`,
            module: newPermissionModule,
          },
        );
        permissionNameToSet = newPermissionName;
      }
      // 如果只是菜单名称变化，更新权限描述
      else if (updateData.name) {
        await this.permissionService.updateByName(
          menu.autoGeneratedPermission,
          {
            description: `访问 ${updateData.name} 页面的权限`,
          },
        );
      }
    }

    // 构建更新对象，包含可能的 autoGeneratedPermission
    const updateObject = {
      ...updateData,
      ...(permissionNameToSet && {
        autoGeneratedPermission: permissionNameToSet,
      }),
    };

    // 更新菜单
    Object.assign(menu, updateObject);
    const updatedMenu = await this.menuRepository.save(menu);

    if (!updatedMenu) {
      // 在这种情况下，可以定义一个新的错误码，或者复用一个通用的“更新失败”错误码
      // 这里我们暂时复用 MENU_NOT_FOUND，但更理想的是有专门的错误码
      throw new BusinessException(ERROR_CODES.MENU_NOT_FOUND);
    }
    return this.convertToResponseDto(updatedMenu as MenuTree);
  }

  async delete(id: string): Promise<void> {
    const menu = await this.menuRepository.findOne({ where: { id } });
    if (!menu) {
      throw new BusinessException(ERROR_CODES.MENU_NOT_FOUND);
    }

    // 删除关联的权限
    if (menu.autoGeneratedPermission) {
      await this.permissionService.removeByName(menu.autoGeneratedPermission);
    }

    await this.menuRepository.remove(menu);
  }

  private buildMenuTree(menus: Menu[]): MenuTree[] {
    const menuMap = new Map<string, MenuTree>();
    const rootMenus: MenuTree[] = [];

    // 创建菜单映射
    menus.forEach((menu) => {
      menuMap.set(menu.id, { ...menu, children: [] });
    });

    // 构建树形结构
    menus.forEach((menu) => {
      const menuObj = menuMap.get(menu.id);
      if (!menuObj) return;

      if (menu.parentId) {
        const parentId = menu.parentId;
        const parent = menuMap.get(parentId);
        if (parent) {
          parent.children.push(menuObj);
        }
      } else {
        rootMenus.push(menuObj);
      }
    });

    return rootMenus.sort((a, b) => a.sortOrder - b.sortOrder);
  }

  private convertToResponseDto(menuTree: MenuTree): MenuResponseDto {
    return {
      id: menuTree.id,
      parentId: menuTree.parentId ? menuTree.parentId : undefined,
      path: menuTree.path || '',
      name: menuTree.name || '',
      component: menuTree.component || '',
      redirect: menuTree.redirect ? menuTree.redirect : undefined,
      meta: {
        title: menuTree.metaTitle || '',
        icon: menuTree.metaIcon || '',
        hidden: menuTree.metaHidden || false,
        alwaysShow: menuTree.metaAlwaysShow || false,
      },
      sortOrder: menuTree.sortOrder || 0,
      status: menuTree.status || 'active',
      createdAt: menuTree.createdAt?.toISOString() || new Date().toISOString(),
      updatedAt: menuTree.updatedAt?.toISOString() || new Date().toISOString(),
      children:
        menuTree.children?.map((child) => this.convertToResponseDto(child)) ||
        [],
    };
  }

  private getModuleFromPath(path: string): string {
    // 从路径中提取模块名，如 '/system/user' -> 'system'
    const segments = path.split('/').filter((segment) => segment);
    return segments.length > 0 ? segments[0] : 'general';
  }

  private getPermissionName(menuName: string): string {
    // 将菜单名转换为权限名格式，如 'User Management' -> 'user-management'
    return menuName.toLowerCase().replace(/\s+/g, '-');
  }

  /**
   * 类型守卫函数，用于安全地检查权限对象
   * @param permission 权限对象
   * @returns 如果是有效的权限对象则返回true
   */
  private isPermissionObject(
    permission: unknown,
  ): permission is { id: string } {
    return (
      permission !== null &&
      typeof permission === 'object' &&
      'id' in permission &&
      typeof (permission as { id: unknown }).id === 'string'
    );
  }
}
